MISP or 'Mud Lisp' is a scripting language designed for my current un-named mud engine. Every aspect of the mud, from command matching to logging in, is written in MISP. The mud engine presents a multi-user terminal to a MISP interpretter. The engine provides only minimal tools to this emulator - a simple verb matching mechanism, an 'action' queue, and a dead-simple on disc 'database'. The design is somewhat inspired by LPMud, which presents a similar environment for LPC. Everything that makes the mud a mud is implemented in MISP, and thus is part of the database. Individual MISP source files (or 'Database Objects' - they are one and the same) can be reloaded on-the-fly, allowing you to make sweeping changes without shutting down and restarting the mud. (Be careful, though. It's certainly possible to break it.)

A MISP script is a list of parenthesized nodes separated by text, whitespace, or nothing at all. Each script is a database object. At the top level, things in between nodes are discarded and can be used for comments. Comments between /* and */ are also supported. A node is (usually) a function call. The first item inside the node is the function to call, followed by any number of arguments. (function_name argument argument argument) The default database offers the 'functions' command which will list all the functions currently defined in the emulator. 
Some prefixes change the behavior of nodes. ^ makes the node a list. It won't be evaluated (but all of it's arguments will be). Prefix the node with * and it won't be evaluated at all. The result is a parse tree. Some functions expect a parse tree as an argument and will evaluate it themselves. $ expands a node into the argument list of it's parent node. The node is still evaluated, so given (bar $(foo)), if foo is a list or a function that returns a list, the first argument to bar will be the first item in the list, and the second argument will be the second item, and so forth.